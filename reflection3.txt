1. When would you want to use a remote repository rather than keeping all your work local?
Collaborating with people would be one good use case--everyone has access to the project files and can make changes on their own computers but then upload it to the github repo. It's also better for sharing projects publicly. Remote repos also make for backups if your computer explodes.

2. Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
There may be changes in the remote on Github that would mess up what you are working on locally. If it pulled changes automatically while you were working on some code, those changes could interfere with your work.

3. Describe the differences between forks, clones, and branches. When would you use one instead of another?
Forks are clones on github of other people's repo's that credit the original author. Clones are copies of the repo on github downloaded to your local machine. Branches are groups of commits in the same repo that let you work on a project without having your working code interfering with your solid production code.

4. What is the benefit of having a copy of the last known state of the remote stored locally?
In case you lose internet access you won't have lost your copy of the repo. You can continute to work on it offline.

5. How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
If I could, I would just do in person meetings with the same code. I could also do a really long complicated email chain or share files via dropbox. It definitely wouldn't have the same versioning robustness and collaboration tools.

6. When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
A separate branch lets you compartmentalize your changes and create pull requests when collaborating with others so they can review your changes before adding them to the master branch. This can help prevent problems when making changes to the master. This also puts responsibility on the pull requestor to resolve any merge conflicts before the branch merges into master. It may be a bit less work to just make changes directly into master, but the risk of breaking something is higher and the project could get away from your control quickly.